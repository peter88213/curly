<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Common" script:language="StarBasic">REM  *****  BASIC  *****
&apos; ----------------------------------------------------------------------
&apos; Language independent part of the OOTyW macro library.
&apos; ----------------------------------------------------------------------

Option Explicit

&apos; ----------------------------------------------------------------------
&apos; Define quote substitutes for intermediate formatting
&apos; ----------------------------------------------------------------------
Const sChopen1 = &quot;┌&quot;
Const sChClose1 = &quot;┐&quot;
Const sChopen2 = &quot;└&quot;
Const sChClose2 = &quot;┘&quot;
Const sChApostrophe = &quot;│&quot;

&apos; ----------------------------------------------------------------------
&apos; Define characters for convenience
&apos; ----------------------------------------------------------------------
Const ChEnDash = &quot;–&quot;
Const ChEmDash = &quot;—&quot;
Const ChEllipsis = &quot;…&quot;
Const ChApostrophe = &quot;’&quot;

&apos; ----------------------------------------------------------------------
&apos; Define colors for &quot;direct speech&quot; view
&apos; ----------------------------------------------------------------------
Const Black = 00000000
Const Gray = 13421772
Const DefaultColor = -1


Sub Main
&apos; ----------------------------------------------------------------------
&apos; Smart apostrophes and ellipses.
&apos; ----------------------------------------------------------------------

Apostrophe
Ellipsis

End Sub



Sub Apostrophe
&apos; ----------------------------------------------------------------------
&apos; Replace number signs and non-spaced single primes by apostrophes.
&apos; ----------------------------------------------------------------------
Dim AOldStr(1) As String
Dim ANewStr(1) As String

AOldStr() = Array(&quot;([:alpha:])&apos;([:alpha:])&quot;,&quot;([:alnum:])#&quot;,&quot;#([:alnum:])&quot;)
ANewStr() = Array(&quot;$1&quot;+ChApostrophe+&quot;$2&quot;,&quot;$1&quot;+ChApostrophe,ChApostrophe+&quot;$1&quot;)

sar(AOldStr,ANewStr,True)

End Sub



Sub Ellipsis
&apos; ----------------------------------------------------------------------
&apos; Replace triple periods by ellipses.
&apos; ----------------------------------------------------------------------

Dim AOldStr(0) As String
Dim ANewStr(0) As String

AOldStr() = Array(&quot;...&quot;)
ANewStr() = Array(ChEllipsis)

sar(AOldStr,ANewStr,False)

End Sub



sub En_dash
&apos; ----------------------------------------------------------------------
&apos; Replace double hyphens by en-dashes.
&apos; ----------------------------------------------------------------------

Dim AOldStr(0) As String
Dim ANewStr(0) As String

AOldStr() = Array(&quot;--&quot;)
ANewStr() = Array(ChEnDash)

sar(AOldStr,ANewStr,False)

End Sub



sub Em_dash
&apos; ----------------------------------------------------------------------
&apos; Replace double hyphens by em-dashes.
&apos; ----------------------------------------------------------------------

Dim AOldStr(0) As String
Dim ANewStr(0) As String

AOldStr() = Array(&quot;--&quot;)
ANewStr() = Array(ChEmDash)

sar(AOldStr,ANewStr,False)

End Sub



Sub ProtectQM(ChOpen,ChClose)
&apos; ----------------------------------------------------------------------
&apos; Prevent hyphenation around quotation marks:
&apos; Put non-breakable spaces at en-dashes and ellipses
&apos; leading or terminating direct speech.
&apos; ----------------------------------------------------------------------

Dim AOldStr(3) As String
Dim ANewStr(3) As String

AOldStr() = Array(&quot; &quot;+ChEnDash+ChClose,ChOpen+ChEnDash+&quot; &quot;,&quot; &quot;+ChEllipsis+ChClose,ChOpen+ChEllipsis+&quot; &quot;)
ANewStr() = Array(Chr(160)+ChEnDash+ChClose,ChOpen+ChEnDash+Chr(160),Chr(160)+ChEllipsis+ChClose,ChOpen+ChEllipsis+Chr(160))

sar(AOldStr,ANewStr,False)

End Sub



Sub UnprotectQM(ChOpen,ChClose)
&apos; ----------------------------------------------------------------------
&apos; Put breakable blanks at dashes and ellipses
&apos; leading or terminating direct speech.
&apos; ----------------------------------------------------------------------

Dim AOldStr(5) As String
Dim ANewStr(5) As String

AOldStr() = Array(Chr(160)+ChEnDash+ChClose,ChOpen+ChEnDash+Chr(160),Chr(160)+ChEllipsis+ChClose,ChOpen+ChEllipsis+Chr(160),Chr(160)+&quot;--&quot;+ChClose,ChOpen+&quot;--&quot;+Chr(160))
AnewStr() = Array(&quot; &quot;+ChEnDash+ChClose,ChOpen+ChEnDash+&quot; &quot;,&quot; &quot;+ChEllipsis+ChClose,ChOpen+ChEllipsis+&quot; &quot;,&quot; --&quot;+ChClose,ChOpen+&quot;-- &quot;)

sar(AOldStr,ANewStr,False)

End Sub



sub SubstitutePrimesI
&apos; ----------------------------------------------------------------------
&apos; Replace single and double primes by &quot;neutral&quot; quote substitutes
&apos; according to parameters.
&apos; Initial quotation is single (&apos;)
&apos; ----------------------------------------------------------------------

Dim AOldStr(9) As String
Dim ANewStr(9) As String

AOldStr() = Array(&quot;(\n)&apos;&quot;,&quot;(\n)&quot;+Chr(34),&quot;([:alpha:])&apos;([:alpha:])&quot;,&quot;^&apos;&quot;,&quot; &apos;&quot;,&quot;\(&apos;&quot;,&quot;&apos;&quot;,&quot;^&quot;+Chr(34),&quot; &quot;+Chr(34),&quot;\(&quot;+Chr(34),sChOpen2+Chr(34),Chr(34))
ANewStr() = Array(&quot;$1&quot;+sChOpen2,&quot;$1&quot;+sChOpen1,&quot;$1&quot;+sChApostrophe+&quot;$2&quot;,sChOpen2,&quot; &quot;+sChOpen2,&quot;(&quot;+sChOpen2,sChClose2,sChOpen1,&quot; &quot;+sChOpen1,&quot;(&quot;+sChOpen1,sChOpen2+sChOpen1,sChClose1)

sar(AOldStr,ANewStr,True)

End Sub


sub SubstitutePrimesII
&apos; ----------------------------------------------------------------------
&apos; Replace single and double primes by &quot;neutral&quot; quote substitutes
&apos; according to parameters.
&apos; Initial quotation is double (&quot;)
&apos; ----------------------------------------------------------------------

Dim AOldStr(9) As String
Dim ANewStr(9) As String

AOldStr() = Array(&quot;(\n)&quot;+Chr(34),&quot;(\n)&apos;&quot;,&quot;([:alpha:])&apos;([:alpha:])&quot;,&quot;^&quot;+Chr(34),&quot; &quot;+Chr(34),&quot;\(&quot;+Chr(34),Chr(34),&quot;^&apos;&quot;,&quot; &apos;&quot;,&quot;\(&apos;&quot;,sChOpen2+&quot;&apos;&quot;,&quot;&apos;&quot;)
ANewStr() = Array(&quot;$1&quot;+sChOpen2,&quot;$1&quot;+sChOpen1,&quot;$1&quot;+sChApostrophe+&quot;$2&quot;,sChOpen2,&quot; &quot;+sChOpen2,&quot;(&quot;+sChOpen2,sChClose2,sChOpen1,&quot; &quot;+sChOpen1,&quot;(&quot;+sChOpen1,sChOpen2+sChOpen1,sChClose1)

sar(AOldStr,ANewStr,True)

End Sub


sub SubstituteQuotes(ChOpen1,ChClose1,ChOpen2,ChClose2)
&apos; ----------------------------------------------------------------------
&apos; Replace curly quotes by &quot;neutral&quot; substitutes
&apos; according to parameters.
&apos; ----------------------------------------------------------------------

Dim AOldStr(5) As String
Dim ANewStr(5) As String

AOldStr() = Array(&quot;([:alpha:])&quot;+ChApostrophe+&quot;([:alpha:])&quot;,ChOpen1,ChClose1,ChOpen2,ChClose2,ChApostrophe)
ANewStr() = Array(&quot;$1&quot;+sChApostrophe+&quot;$2&quot;,sChOpen1,sChClose1,sChOpen2,sChClose2,sChApostrophe)

sar(AOldStr,ANewStr,True)

Revert.Dash

End Sub



sub CurlyQuotes(ChOpen1,ChClose1,ChOpen2,ChClose2)
&apos; ----------------------------------------------------------------------
&apos; Replace &quot;neutral&quot; quote substitutes by curly quotes
&apos; according to parameters.
&apos; ----------------------------------------------------------------------

Dim AOldStr(4) As String
Dim ANewStr(4) As String

AOldStr() = Array(sChApostrophe,sChOpen1,sChClose1,sChOpen2,sChClose2)
ANewStr() = Array(ChApostrophe,ChOpen1,ChClose1,ChOpen2,ChClose2)

sar(AOldStr,ANewStr,False)

End Sub



sub ShowDirectSpeech(QuotedTextPattern)
&apos; ----------------------------------------------------------------------
&apos; Colorize non-direct speech (as defined by regular expression)
&apos; light gray.
&apos; ----------------------------------------------------------------------

&apos; ----------------------------------------------------------------------
&apos; define variables

dim document   as object
dim dispatcher as object
dim oSaveCursor as object
dim oViewCursor as object

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

&apos; ----------------------------------------------------------------------
&apos; save cursor position

oSaveCursor = ThisComponent.Text.createTextCursor()
oViewCursor = ThisComponent.CurrentController().getViewCursor()
On Local Error Resume Next
oSaveCursor = ThisComponent.Text.createTextCursorByRange(oViewCursor)
oViewCursor.gotoRange(oSaveCursor,False)

&apos; ----------------------------------------------------------------------
&apos; select whole text

dispatcher.executeDispatch(document, &quot;.uno:SelectAll&quot;, &quot;&quot;, 0, Array())

&apos; ----------------------------------------------------------------------
&apos; set whole text to gray

dim args2(0) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;Color&quot;
args2(0).Value = Gray

dispatcher.executeDispatch(document, &quot;.uno:Color&quot;, &quot;&quot;, 0, args2())

&apos; ----------------------------------------------------------------------
&apos; mark all text within quotes

dim args3(18) as new com.sun.star.beans.PropertyValue
args3(0).Name = &quot;SearchItem.StyleFamily&quot;
args3(0).Value = 2
args3(1).Name = &quot;SearchItem.CellType&quot;
args3(1).Value = 0
args3(2).Name = &quot;SearchItem.RowDirection&quot;
args3(2).Value = true
args3(3).Name = &quot;SearchItem.AllTables&quot;
args3(3).Value = false
args3(4).Name = &quot;SearchItem.Backward&quot;
args3(4).Value = false
args3(5).Name = &quot;SearchItem.Pattern&quot;
args3(5).Value = false
args3(6).Name = &quot;SearchItem.Content&quot;
args3(6).Value = false
args3(7).Name = &quot;SearchItem.AsianOptions&quot;
args3(7).Value = false
args3(8).Name = &quot;SearchItem.AlgorithmType&quot;
args3(8).Value = 1
args3(9).Name = &quot;SearchItem.SearchFlags&quot;
args3(9).Value = 65536
args3(10).Name = &quot;SearchItem.SearchString&quot;
args3(10).Value = QuotedTextPattern
args3(11).Name = &quot;SearchItem.ReplaceString&quot;
args3(11).Value = &quot;&quot;
args3(12).Name = &quot;SearchItem.Locale&quot;
args3(12).Value = 255
args3(13).Name = &quot;SearchItem.ChangedChars&quot;
args3(13).Value = 2
args3(14).Name = &quot;SearchItem.DeletedChars&quot;
args3(14).Value = 2
args3(15).Name = &quot;SearchItem.InsertedChars&quot;
args3(15).Value = 2
args3(16).Name = &quot;SearchItem.TransliterateFlags&quot;
args3(16).Value = 1280
args3(17).Name = &quot;SearchItem.Command&quot;
args3(17).Value = 1
args3(18).Name = &quot;Quiet&quot;
args3(18).Value = true

dispatcher.executeDispatch(document, &quot;.uno:ExecuteSearch&quot;, &quot;&quot;, 0, args3())

&apos; ----------------------------------------------------------------------
&apos; set color of text in quotes to black

dim args4(0) as new com.sun.star.beans.PropertyValue
args4(0).Name = &quot;Color&quot;
args4(0).Value = Black

dispatcher.executeDispatch(document, &quot;.uno:Color&quot;, &quot;&quot;, 0, args4())

&apos; ----------------------------------------------------------------------
&apos; restore cursor position

oViewCursor.gotoRange(oSaveCursor,False)

end sub



sub StandardView
&apos; ----------------------------------------------------------------------
&apos; Set all text to default color.
&apos; ----------------------------------------------------------------------

&apos; ----------------------------------------------------------------------
&apos; define variables

dim document   as object
dim dispatcher as object
dim oSaveCursor as object
dim oViewCursor as object

&apos; ----------------------------------------------------------------------
&apos; get access to the document

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

&apos; ----------------------------------------------------------------------
&apos; save cursor position


oSaveCursor = ThisComponent.Text.createTextCursor()
oViewCursor = ThisComponent.CurrentController().getViewCursor()
On Local Error Resume Next
oSaveCursor = ThisComponent.Text.createTextCursorByRange(oViewCursor)
oViewCursor.gotoRange(oSaveCursor,False)

&apos; ----------------------------------------------------------------------
&apos; select whole text

dispatcher.executeDispatch(document, &quot;.uno:SelectAll&quot;, &quot;&quot;, 0, Array())

&apos; ----------------------------------------------------------------------
&apos; set text color to default (should delete hard formatting)

dim args2(0) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;Color&quot;
args2(0).Value = DefaultColor

dispatcher.executeDispatch(document, &quot;.uno:Color&quot;, &quot;&quot;, 0, args2())

&apos; ----------------------------------------------------------------------
&apos; restore cursor position

oViewCursor.gotoRange(oSaveCursor,False)

end sub



sub sar(AOldStr,ANewStr,regex)
&apos; ----------------------------------------------------------------------
&apos; Search and replace an array of strings.
&apos; Regular expressions optional.
&apos; ----------------------------------------------------------------------

Dim I As Long
Dim Doc As Object
Dim Replace As Object

Doc = StarDesktop.CurrentComponent
Replace = Doc.createReplaceDescriptor
Replace.SearchRegularExpression = regex

For I = 0 to UBound(AOldStr)
	Replace.setSearchString(AOldStr(I))
	Replace.setReplaceString(ANewStr(I))
	Doc.replaceAll(Replace)
Next I

End Sub

</script:module>
